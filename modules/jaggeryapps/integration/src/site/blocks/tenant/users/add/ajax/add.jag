<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log();
(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");
            mod = jagg.module("tenant");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if(action=="updateUserRoles"){
        var userName=request.getParameter("userName");
        var newRoles=request.getParameter("rolesToAdd");
        var removeRoles=request.getParameter("rolesToDelete");

        var response = {};
        if (jagg.module("permission").isUserAccessGrantedForPlatform(PERMISSION_USER_INVITE)) {
            try {
                var result = mod.updateUserRoles(userName,newRoles,removeRoles);
                if (result != null) {
                    print(result);
                }
            } catch(e) {
                throw "Error while updating user "+userName;
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to update user roles";
            print(response);
        }

    }else if(action=="deleteUserFromTenant"){
        var userName=request.getParameter("userName");

        var response = {};
        if (jagg.module("permission").isUserAccessGrantedForPlatform(PERMISSION_USER_INVITE)) {
            try {
                var result = mod.deleteUserFromTenant(userName);
                if (result != null) {
                    print(result);
                }
            } catch(e) {
                throw "Error while removing user "+userName;
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to delete users from tenant";
            print(response);
        }


    }else if(action=="bulkImportUsers"){
         var users=request.getParameter("users");
         var password=request.getParameter("defaultPassword");

        var response = {};
        if (jagg.module("permission").isUserAccessGrantedForPlatform(PERMISSION_USER_INVITE)) {
            var userArray=users.split(",");
            for(var user in userArray){
                userArray[user]=userArray[user].replace(/^\s+|\s+$/g, '');
            }
            try {
                var result =mod.bulkUserImport(userArray,password);
                if (result != null) {
                    print(result);
                }
            } catch(e) {
                log.error("Error while adding users "+e);
                print(""+e.javaException);
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to import users";
            print(response);
        }


    }else if(action=="changePassword"){
         var newPassword=request.getParameter("newPassword");
         var oldPassword=request.getParameter("oldPassword");
        try {
            var result =mod.changePassword(oldPassword,newPassword);
            if (result != null) {
                print(result);
            }
        } catch(e) {
            throw "Error while changing user passwords for the user";
        }

    }else{
	    throw new Error("No action specified");
    }

}());
%>

