<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log('modules/databases/users/list.jag');
var modManager = jagg.module("manager");

var wso2_rss_instanceName = 'SYSTEM';
var storageServerURL = modManager.getPropertyValue(PROPERTY_STORAGE_SERVER_URL);
var environmentName = modManager.getPropertyValue(PROPERTY_RSS_ENVIRONMENT_NAME);

function buildResponse(result){
	var databaseObject=[];
	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={
			};
			var entry=response[index];
			var name=entry.*::username.text();
			var rssInstanceName=entry.*::rssInstanceName.text();
			task.name=name;
			//task.rssInstanceName=getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+RSS_NAME);
			databaseObject.push(task);
		}
	}
	return databaseObject;
};

var createDatabaseUser = function (username, password ){
	var ws = require('ws');
	var createDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:addDatabaseUser";
	options.robust = true;
	var payload ='<ser:addDatabaseUser xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
                 'xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">' +
	             '<ser:environmentName>' + environmentName + '</ser:environmentName>' +
	             '<ser:user>' +
                 '<xsd:password>'+password+'</xsd:password>'+
	             '<xsd:rssInstanceName>'+wso2_rss_instanceName+'</xsd:rssInstanceName>'+
	             '<xsd:username>'+username+'</xsd:username>'+
                 '</ser:user>'+
                 '</ser:addDatabaseUser>';

	var result="";
	try {
		modManager.setAuthHeaders(options);
		createDatabaseUsersService.open(options, storageServerURL+'RSSAdmin', false);
		createDatabaseUsersService.send(payload);
		result = createDatabaseUsersService.responseE4X;
		var ns = new Namespace("http://service.core.rssmanager.carbon.wso2.org");
		var response=result.ns::["return"];
		var entry = response[0];
		var ax = new Namespace("http://dto.core.rssmanager.carbon.wso2.org/xsd");
		result = entry.ax::["username"].text();
		return result;
	} catch (e) {
		log.error('Error while creating database user : ' + username );
		log.error(e);
		throw e;
	}

};


var getAvailableUsersToAttachToDatabase = function (dbname){
	var ws = require('ws');
	var getAvailableUsersToAttachToDatabaseService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getAvailableUsers";
	modManager.setAuthHeaders(options);
	var payload ='<ser:getAvailableUsers  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
	             '<ser:environmentName>' + environmentName + '</ser:environmentName>' +
	             '<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>' +
	             '<ser:databaseName>'+dbname+'</ser:databaseName>'+
	             '</ser:getAvailableUsers>';

	try {
		getAvailableUsersToAttachToDatabaseService.open(options, storageServerURL+'RSSAdmin', false);
		getAvailableUsersToAttachToDatabaseService.send(payload);
		var result = getAvailableUsersToAttachToDatabaseService.responseE4X;
        return getUserList(result);
	} catch (e) {
		log.error("Error while getting available users to attach to database : " + dbname );
		log.error(e);
		throw e;
	}
};

function getUserList(result){
    var databaseObject=[];
    if(result != undefined){
        var ns = new Namespace("http://service.core.rssmanager.carbon.wso2.org");
        var response=result.ns::["return"];
        for(var index=0; index < response.length();index++){
            var entry = response[index];
            var ax = new Namespace("http://dto.core.rssmanager.carbon.wso2.org/xsd");
            var username=entry.ax::["username"].text();
            databaseObject.push(username);
        }
    }
    return databaseObject;
}

var deleteUser = function ( name){
	var ws = require('ws');
	var deleteDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:removeDatabaseUser";
	options.mep = "in-only"; //This will result in ignoring the error
	options.robust = true;
	modManager.setAuthHeaders(options);

	var payload ='<ser:removeDatabaseUser  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
	'<ser:environmentName>' + environmentName + '</ser:environmentName>' +
	'<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>' +
	'<ser:username>'+ name +'</ser:username></ser:removeDatabaseUser>';

	try {
		deleteDatabaseUsersService.open(options, storageServerURL+'RSSAdmin', false);
		deleteDatabaseUsersService.send(payload);
	} catch (e) {
		log.error("Error while deleting user : " + name );
		log.error(e);
		throw e;
	}
};


var getDatabaseUsers = function (){
	var ws = require('ws');
	var getDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabaseUsers";
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getDatabaseUsers";
    modManager.setAuthHeaders(options);

    var payload = '<ser:getDatabaseUsers  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
            '<ser:environmentName>' + environmentName + '</ser:environmentName>' +
            '</ser:getDatabaseUsers>';
    try {
        getDatabaseUsersService.open(options, storageServerURL + 'RSSAdmin', false);
        getDatabaseUsersService.send(payload);
        var result = getDatabaseUsersService.responseE4X;
    } catch(e) {
        log.error("Error while retrieving all database users");
        log.error(e);
        throw e;
    }
    return buildResponse(result);
};

%>




