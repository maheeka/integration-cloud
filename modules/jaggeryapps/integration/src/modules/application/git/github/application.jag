<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("module/application/git/github/application.jag");
var modManager = jagg.module("manager");
var appManager = jagg.module("application");
var ApplicationManager = Packages.org.wso2.appcloud.core.ApplicationManager;
var Application = Packages.org.wso2.appcloud.core.dto.Application;
var Version = Packages.org.wso2.appcloud.core.dto.Version;
var KubernetesProvisioningUtils =  Packages.org.wso2.appcloud.provisioning.runtime.Utils.KubernetesProvisioningUtils;
var EventsManager = Packages.org.wso2.appcloud.core.EventsManager;
var Event = Packages.org.wso2.appcloud.core.dto.Event;
var Deployment = Packages.org.wso2.appcloud.core.dto.Deployment;
var Container = Packages.org.wso2.appcloud.core.dto.Container;
var ServiceProxy = Packages.org.wso2.appcloud.core.dto.ContainerServiceProxy;
var CloudUtil = Packages.org.wso2.appcloud.common.util.AppCloudUtil;
var RuntimeProperty = Packages.org.wso2.appcloud.core.dto.RuntimeProperty;
var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
var Util = Packages.org.wso2.intcloud.core.Util;

/**
 * Add an application via GitHub repo and branch
 *
 */

var addApplicationViaGitHub = function (applicationName, versionName, applicationDescription, replicas,
                                        runtimeId, appTypeName, runtimePropertiesArray, tagArray, appIcon, gitHubRepoUrl,
                                        gitHubRepoBranch, projectRoot, token, isNewVersion, conSpecMemory, conSpecCpu) {

    log.info("Started creating App => name : " + applicationName + " Version : " + versionName + " Description " +
             ": " + applicationDescription + " runtimeId : " + runtimeId + " apptype : " + appTypeName + " GitHub url: "
                     + gitHubRepoUrl + " Branch: " + gitHubRepoBranch);

    var tenantId = modManager.getTenantId();
    var applicationHashId = Util.getApplicationHashId(applicationName, tenantId);
    var versionHashId = Util.getVersionHashId(applicationName, versionName, tenantId);
    var version;

    if(isNewVersion == 'true'){
        version = appManager.createAppVersionInDataBase(versionName, runtimeId, runtimePropertiesArray, tagArray,
                                                        applicationHashId, versionHashId, conSpecMemory, conSpecCpu);
    }else{
        var application = appManager.createAppInDataBase(applicationName, versionName, applicationDescription, replicas,
                                                         runtimeId, appTypeName, runtimePropertiesArray, tagArray, appIcon,
                                                         applicationHashId, versionHashId, conSpecMemory, conSpecCpu);
        version = application.getVersions().get(0);
    }

    var applicationRuntime = ApplicationManager.getRuntimeById(runtimeId);
    var tagName = applicationRuntime.getTag() +"-"+ versionHashId;
    var DockerOpClient = Packages.org.wso2.appcloud.core.docker.DockerOpClient;
    var dockerOpClient = new DockerOpClient(modManager.getPropertyValue("DockerClientURL"));

    var runtimeProperties = version.getRuntimeProperties();
    var absFileUploadedPath =  createDockerFileForGitHub(applicationName, versionName, runtimeId, gitHubRepoUrl,
                                                         gitHubRepoBranch, projectRoot, versionHashId, dockerOpClient);
    appManager.buildDockerImage(applicationName, versionName, runtimeId, absFileUploadedPath, applicationRuntime, tagName,
                                versionHashId, dockerOpClient);
    appManager.pushDockerImage(applicationName, versionName, applicationRuntime, tagName, versionHashId, dockerOpClient);
    appManager.triggerKubernetesDeployment(runtimeProperties, applicationRuntime, tagName, applicationName, versionName,
                                           runtimeId, replicas, versionHashId, conSpecMemory, conSpecCpu);
};


var createDockerFileForGitHub =  function(applicationName, versionName, runtimeId, gitHubRepoUrl, gitHubRepoBranch, projectRoot, versionHashId, dockerOpClient){
    var msg = "Docker file creation successfully triggered in appcloud";
    appManager.addEvent(DOCKER_FILE_CREATE, EVENT_PENDING, msg, versionHashId);
    var absFileUploadedPath;

    try {
        var absFileUploadedPath = appManager.getVersionDirectoryPath(versionHashId);
        var dockerFilePath = absFileUploadedPath + DOCKER_FILE_NAME;
        var dockerTemplateFilePath = modManager.getPropertyValue(PROPERTY_INTCLOUD_DEPLOYMENT_DIR_PATH) + "/" + "dockerfiles";
        var hostName = appManager.getAppLaunchURL(applicationName, versionName);
        dockerOpClient.createDockerFileForGitHub(runtimeId, gitHubRepoUrl, gitHubRepoBranch, dockerFilePath, projectRoot, dockerTemplateFilePath, hostName);
    } catch(e){
        var msg = "Error while creating docker file";
        appManager.addEvent(DOCKER_FILE_CREATE, EVENT_FAILED, msg, versionHashId);

        try {
            ApplicationManager.updateVersionStatus(versionHashId, APPLICATION_ERROR);
        } catch(e1){
            log.error("Error while updating Application Creation Failed event for application : " + applicationName
                              + " version : " + versionName);
            log.error(e1);
            // not throwing the error, because it will hide the actual exception
        }

        log.error(msg);
        log.error(e);
        log.info("Application creation failed because docker file creation failed and roll back process" +
                 " is started for application : "+applicationName+" with revision : "+versionName);
        appManager.deleteApplicationUploadedPath(versionHashId);
        appManager.deleteVersionFromDatabase(versionHashId);
        throw e;
    }

    //Adding docker file create success event
    var msg = "Docker file successfully created for application";
    appManager.addEvent(DOCKER_FILE_CREATE, EVENT_SUCCEEDED, msg, versionHashId);
    return absFileUploadedPath;
}
%>